pipeline {
    agent any

    environment {
        DEPLOY_DIR = '/var/www/html/codestore-admin' // Deployment directory
        GITHUB_REPO = 'https://github.com/richest/code-store-admin.git'
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo 'Cloning repository to Jenkins workspace...'
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'master']],
                    userRemoteConfigs: [[
                        url: GITHUB_REPO,
                        credentialsId: 'github-credentials'
                    ]]
                ])
            }
        }

        stage('Pull Latest Changes') {
            steps {
                echo 'Pulling latest changes from GitHub...'
                withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                    sh """
                        git config --global --add safe.directory ${DEPLOY_DIR} && \
                        cd ${DEPLOY_DIR} || exit 1 && \
                        git remote set-url origin https://${GIT_USER}:${GIT_PASS}@github.com/richest/code-store-admin.git && \
                        git fetch --all && \
                        git reset --hard origin/master
                    """
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing project dependencies...'
                sh """
                    cd ${DEPLOY_DIR} && \
                    npm install
                """
            }
        }

        stage('Build Project') {
            steps {
                echo 'Building project...'
                sh """
                    cd ${DEPLOY_DIR} && \
                    npm run build
                """
            }
        }

        stage('Remove Build Content') {
            steps {
                echo 'Moving Build...'
                sh """
                    cd ${DEPLOY_DIR}/build && \
                    rm -rf *
                """
            }
        }

        stage('Move Build') {
            steps {
                echo 'Moving Build...'
                sh """
                    cd ${DEPLOY_DIR}/dist && \
                    mv * ../build
                """
            }
        }

        // stage('Restart Application') {
        //     steps {
        //         echo 'Restarting application using PM2...'
        //         sh '''
        //             cd ${DEPLOY_DIR}
        //             # Check if PM2 process "codestore-api" is running
        //             if pm2 list | grep -q "codestore-api"; then
        //                 pm2 restart codestore-api
        //             else
        //                 pm2 start npm --name codestore-api -- run start
        //             fi
        //             pm2 save
        //         '''
        //     }
        // }
    }

    post {
        success {
            echo 'Deployment completed successfully!'
        }
        failure {
            echo 'Deployment failed. Check the logs for more details.'
        }
        always {
            cleanWs() // Cleans workspace after build
        }
    }
}
