pipeline {
    agent any

    environment {
        DEPLOY_DIR = '/var/www/html/code-storefrontend' // Deployment directory
        GITHUB_REPO = 'https://github.com/richest/code-store-frontend.git'
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo 'Cloning repository to Jenkins workspace...'
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'master']],
                    userRemoteConfigs: [[
                        url: GITHUB_REPO,
                        credentialsId: 'github-credentials'
                    ]]
                ])
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing project dependencies...'
                sh """
                    cd ${DEPLOY_DIR} && \
                    npm install
                """
            }
        }

        stage('Build Project') {
            steps {
                echo 'Building project...'
                sh """
                    cd ${DEPLOY_DIR} && \
                    npm run build
                """
            }
        }

        stage('Restart Application') {
            steps {
                echo 'Restarting application using PM2...'
                sh """
                    cd ${DEPLOY_DIR} || exit 1
                    # Check if the process exists
                    if pm2 describe "5" > /dev/null 2>&1; then
                        echo "Process exists, restarting..."
                        pm2 restart "5" --update-env
                    else
                        echo "Process does not exist..."
                        pm2 start npm --name codestorefrontend -- run start
                    fi
                    pm2 save
                """
            }
        }
    }

    post {
        success {
            echo 'Deployment completed successfully!'
        }
        failure {
            echo 'Deployment failed. Check the logs for more details.'
        }
        always {
            cleanWs() // Cleans workspace after build
        }
    }
}
